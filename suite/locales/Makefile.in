# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the Mozilla Browser code.
#
# The Initial Developer of the Original Code is
# Benjamin Smedberg <bsmedberg@covad.net>
# Portions created by the Initial Developer are Copyright (C) 2004
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH          = ../..
topsrcdir      = @top_srcdir@
srcdir         = @srcdir@
VPATH          = @srcdir@
relativesrcdir = suite/locales

include $(DEPTH)/config/autoconf.mk

include $(topsrcdir)/config/config.mk

vpath %.src @srcdir@/en-US/searchplugins
vpath %.png @srcdir@/en-US/searchplugins
vpath %.src $(LOCALE_SRCDIR)/searchplugins
vpath %.png $(LOCALE_SRCDIR)/searchplugins

run_for_effects := $(shell if test ! -d $(DIST); then $(NSINSTALL) -D $(DIST); fi; if test ! -d $(DIST)/branding; then $(NSINSTALL) -D $(DIST)/branding; fi)
_ABS_DIST := $(call core_abspath,$(DIST))

SUBMAKEFILES += \
	$(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/Makefile \
	$(NULL)

AB = $(firstword $(subst -, ,$(AB_CD)))

PWD := $(CURDIR)

# These are defaulted to be compatible with the files the wget-en-US target
# pulls. You may override them if you provide your own files. You _must_
# override them when MOZ_PKG_PRETTYNAMES is defined - the defaults will not
# work in that case.
ZIP_IN ?= $(_ABS_DIST)/$(PACKAGE)
WIN32_INSTALLER_IN ?= $(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe
RETRIEVE_WINDOWS_INSTALLER = 1

DEFINES += \
	-DAB_CD=$(AB_CD) \
	-DMOZ_PSM=$(MOZ_PSM) \
	-DMOZ_LANGPACK_EID=langpack-$(AB_CD)@seamonkey.mozilla.org \
	-DMOZ_APP_VERSION=$(MOZ_APP_VERSION) \
	-DLOCALE_SRCDIR=$(call core_abspath,$(LOCALE_SRCDIR)) \
	-DPKG_BASENAME="$(PKG_BASENAME)" \
	-DPKG_INST_BASENAME="$(PKG_INST_BASENAME)" \
	$(NULL)

PREF_JS_EXPORTS = $(LOCALE_SRCDIR)/suite-l10n.js

include $(topsrcdir)/config/rules.mk

ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
README_FILES = \
	installer/mac/README.txt \
	$(NULL)
else
ifeq ($(OS_ARCH),WINNT)
README_FILES = \
	installer/windows/README.txt \
	$(NULL)
else
README_FILES = \
	installer/unix/README \
	$(NULL)
endif
endif

PROFILE_FILES = \
	mimeTypes.rdf \
	localstore.rdf \
	$(NULL)

PROFILE_CHROME = userChrome-example.css userContent-example.css

libs:: $(addprefix $(LOCALE_SRCDIR)/,$(README_FILES))
ifeq ($(OS_ARCH),WINNT)
	for file in $^; do \
	$(EXIT_ON_ERROR) \
	$(PERL) -pe 's/(?<!\r)\n/\r\n/g;' < $$file > $(FINAL_TARGET)/`basename $$file`; \
	done
else
ifneq ($(OS_ARCH),OS2)
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)
endif
endif

NO_JA_JP_MAC_AB_CD := $(if $(filter ja-JP-mac, $(AB_CD)),ja,$(AB_CD))

BOOKMARKS_INC = $(firstword $(wildcard $(LOCALE_SRCDIR)/profile/bookmarks.inc) \
                            @srcdir@/en-US/profile/bookmarks.inc )
BOOKMARKS_EXTRA = $(firstword $(wildcard $(LOCALE_SRCDIR)/profile/bookmarks.extra) \
                              @srcdir@/en-US/profile/bookmarks.extra )

%/defaults/profile/bookmarks.html: generic/profile/bookmarks.html.in
	$(NSINSTALL) -D $(dir $@)
	$(RM) -rf profile/*bookmarks*
	$(NSINSTALL) -D profile
	# the #include in the .in file requires all to be in the same dir
	cp $^ $(BOOKMARKS_INC) $(BOOKMARKS_EXTRA) profile/
	$(PYTHON) $(MOZILLA_SRCDIR)/config/Preprocessor.py \
	  -DAB_CD=$(NO_JA_JP_MAC_AB_CD) \
	  profile/bookmarks.html.in \
	  > $@

PANELS_EXTRA = $(firstword $(wildcard $(LOCALE_SRCDIR)/profile/panels.extra) \
                           @srcdir@/en-US/profile/panels.extra )

%/defaults/profile/panels.rdf: generic/profile/panels.rdf.in
	$(NSINSTALL) -D $(dir $@)
	$(RM) -rf profile/panels*
	$(NSINSTALL) -D profile
	# the #include in the .in file requires all to be in the same dir
	cp $^ $(PANELS_EXTRA) profile/
	sed -n 's/.*<RDF:Description about="\(.*\)">.*/        <RDF:li resource="\1"\/>/p' profile/panels.extra > profile/panels-urn.inc
	$(PYTHON) $(MOZILLA_SRCDIR)/config/Preprocessor.py profile/panels.rdf.in > $@

SEARCH_PLUGINS = $(shell cat \
   $(firstword $(wildcard $(LOCALE_SRCDIR)/searchplugins/list.txt) \
               @srcdir@/en-US/searchplugins/list.txt ) )

%/defaults/profile/search.rdf: generic/profile/search.rdf.in
	$(NSINSTALL) -D $(dir $@)
	$(RM) -rf profile/search*
	$(NSINSTALL) -D profile
	# the #include in the .in file requires both to be in the same dir
	cp $^ profile/
	for engine in $(SEARCH_PLUGINS); do \
	  echo "    <RDF:li resource=\"NC:SearchCategory?engine=urn:search:engine:$$engine.src\" />" >> profile/search.rdf.inc; \
	done
	$(PYTHON) $(MOZILLA_SRCDIR)/config/Preprocessor.py profile/search.rdf.in > $@

GARBAGE_DIRS += profile

libs:: $(FINAL_TARGET)/defaults/profile/bookmarks.html ;
libs:: $(FINAL_TARGET)/defaults/profile/search.rdf ;
libs:: $(FINAL_TARGET)/defaults/profile/panels.rdf ;

libs:: $(addprefix generic/profile/,$(PROFILE_FILES))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/defaults/profile

libs:: $(addprefix $(LOCALE_SRCDIR)/profile/chrome/,$(PROFILE_CHROME))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/defaults/profile/chrome

install:: $(DESTDIR)$(mozappdir)/defaults/profile/bookmarks.html ;
install:: $(DESTDIR)$(mozappdir)/defaults/profile/search.rdf ;
install:: $(DESTDIR)$(mozappdir)/defaults/profile/panels.rdf ;

install:: $(addprefix generic/profile/,$(PROFILE_FILES))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/defaults/profile

install:: $(addprefix $(LOCALE_SRCDIR)/profile/chrome/,$(PROFILE_CHROME))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/defaults/profile/chrome

libs:: $(addsuffix .src,$(SEARCH_PLUGINS)) $(addsuffix .png,$(SEARCH_PLUGINS))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/searchplugins

install:: $(addsuffix .src,$(SEARCH_PLUGINS)) $(addsuffix .png,$(SEARCH_PLUGINS))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/searchplugins

tests:
ifeq (WINNT, $(OS_ARCH))
ifneq (en-US, $(AB_CD))
	@echo "Verifying $(AB_CD) installer variable usage"
	@$(PERL) $(MOZILLA_SRCDIR)/toolkit/mozapps/installer/windows/nsis/check-locales.pl $(LOCALE_SRCDIR)/installer/windows
endif
endif

clobber-%:
	$(RM) -rf $(DIST)/xpi-stage/locale-$*
	$(RM) -rf $(DIST)/xpi-stage/chatzilla-$* $(DIST)/xpi-stage/chatzilla-*.$*.xpi
	$(RM) -rf $(DIST)/xpi-stage/venkman-$* $(DIST)/xpi-stage/venkman-*.$*.xpi

libs-%:
	$(NSINSTALL) -D $(DIST)/install
	@$(MAKE) -C ../../mozilla/toolkit/locales libs-$* BOTH_MANIFESTS=1
	@$(MAKE) -C ../../editor/ui/locales AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1
	if test -d ../../mozilla/extensions/irc; then \
	  $(MAKE) -C ../../mozilla/extensions/irc/locales libs-$* BOTH_MANIFESTS=1; \
	fi
	if test -d ../../mozilla/extensions/venkman; then \
	  $(MAKE) -C ../../mozilla/extensions/venkman/locales libs-$* BOTH_MANIFESTS=1; \
	fi
	@$(MAKE) -C ../../mozilla/extensions/reporter/locales libs AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1
	@$(MAKE) -C ../../mozilla/extensions/spellcheck/locales AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1
	@$(MAKE) libs AB_CD=$* XPI_NAME=locale-$* PREF_DIR=defaults/pref BOTH_MANIFESTS=1
	@$(MAKE) tests AB_CD=$*

ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
MOZ_PKG_MAC_DSSTORE=$(_ABS_DIST)/branding/dsstore
MOZ_PKG_MAC_BACKGROUND=$(_ABS_DIST)/branding/background.png
MOZ_PKG_MAC_ICON=$(_ABS_DIST)/branding/disk.icns
MOZ_PKG_MAC_EXTRA=--format UDBZ \
                  --symlink "/Applications: " \
                  --copy "$(LOCALE_SRCDIR)/installer/mac/README.txt"
endif

PACKAGER_NO_LIBS = 1
include $(MOZILLA_SRCDIR)/toolkit/mozapps/installer/packager.mk

repackage-win32-installer: WIN32_INSTALLER_OUT="$(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
repackage-win32-installer: $(WIN32_INSTALLER_IN) $(SUBMAKEFILES)
	@echo "Repackaging $(WIN32_INSTALLER_IN) into $(WIN32_INSTALLER_OUT)."
	$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY) export
	if test ! -d $(_ABS_DIST)/$(PKG_INST_PATH); then \
	  $(NSINSTALL) -D $(_ABS_DIST)/$(PKG_INST_PATH); \
	fi
	$(RM) -rf l10n-stage
	$(NSINSTALL) -D l10n-stage
	$(CYGWIN_WRAPPER) 7z x -ol10n-stage $(WIN32_INSTALLER_IN)
	$(RM) -r l10n-stage/localized
	$(RM) l10n-stage/setup.exe
# copy xpi-stage over, but not install.rdf and chrome.manifest,
# those are just for language packs
	cp -r $(DIST)/xpi-stage/locale-$(AB_CD) l10n-stage/localized
	$(RM) l10n-stage/localized/install.rdf l10n-stage/localized/chrome.manifest
	if test -d ../../mozilla/extensions/irc; then \
	  $(MAKE) -C ../../mozilla/extensions/irc/locales repackage-win32-installer-$(AB_CD) STAGEDIST=$(shell pwd)/l10n-stage; \
	fi
	if test -d ../../mozilla/extensions/venkman; then \
	  $(MAKE) -C ../../mozilla/extensions/venkman/locales repackage-win32-installer-$(AB_CD) STAGEDIST=$(shell pwd)/l10n-stage; \
	fi
	$(MAKE) -C ../installer/windows CONFIG_DIR=l10ngen l10ngen/setup.exe l10ngen/7zSD.sfx
	cp ../installer/windows/l10ngen/setup.exe l10n-stage
	$(NSINSTALL) -D l10n-stage/localized/uninstall
	cp ../installer/windows/l10ngen/helper.exe l10n-stage/localized/uninstall
	rm -f app.7z
	cd l10n-stage && \
	  $(CYGWIN_WRAPPER) 7z a -r -t7z ../app.7z -mx -m0=BCJ2 -m1=LZMA:d24 -m2=LZMA:d19 -m3=LZMA:d19 -mb0:1 -mb0s1:2 -mb0s2:3
	cat ../installer/windows/l10ngen/7zSD.sfx \
	    $(topsrcdir)/suite/installer/windows/app.tag \
	    app.7z > $(WIN32_INSTALLER_OUT)
	chmod 0755 $(WIN32_INSTALLER_OUT)

ifeq (WINNT,$(OS_ARCH))
repackage-win32-installer-%: $(WIN32_INSTALLER_IN) libs-%
	@$(MAKE) repackage-win32-installer AB_CD=$* WIN32_INSTALLER_IN=$(WIN32_INSTALLER_IN)
else
repackage-win32-installer-%: ;
endif

ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/MacOS
# leave out $(STAGEPATH) as we never have a universal/ subdir here
PKG_DMG_SOURCE = $(MOZ_PKG_APPNAME)
else
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_DIR)
endif

$(STAGEDIST): AB_CD:=en-US
$(STAGEDIST): UNPACKAGE=$(ZIP_IN)
$(STAGEDIST): $(ZIP_IN)
# only mac needs to remove the parent of STAGEDIST...
ifeq (cocoa,$(MOZ_WIDGET_TOOLKIT))
	if test -d $(DIST)/l10n-stage; then \
	  $(RM) -r -v $(DIST)/l10n-stage; \
	fi
else
# ... and windows doesn't like removing STAGEDIST itself, remove all children
	if test -d $(DIST)/l10n-stage; then \
	  find $(STAGEDIST) -maxdepth 1 -print0 | xargs -0 $(RM) -r ; \
	fi
endif
	$(NSINSTALL) -D $(DIST)/l10n-stage
	cd $(DIST)/l10n-stage && \
	  $(UNMAKE_PACKAGE)
	make clobber-zip AB_CD=en-US

clobber-zip:
	$(RM) $(STAGEDIST)/chrome/$(AB_CD).jar \
	  $(STAGEDIST)/chrome/$(AB_CD).manifest \
	  $(STAGEDIST)/defaults/pref/suite-l10n.js
	$(RM) -r $(STAGEDIST)/searchplugins \
	  $(STAGEDIST)/dictionaries \
	  $(STAGEDIST)/defaults/profile \
	  $(STAGEDIST)/chrome/$(AB_CD) \
	  $(STAGEDIST)/extensions/langpack-$(AB_CD)@*

unpack: $(STAGEDIST)
	@echo done unpacking

repackage-zip: ZIP_OUT="$(_ABS_DIST)/$(PACKAGE)"
repackage-zip: UNPACKAGE="$(ZIP_IN)"
repackage-zip:
ifeq (WINNT,$(OS_ARCH))
	$(RM) -r $(STAGEDIST)/uninstall
	$(NSINSTALL) -D $(STAGEDIST)/uninstall
	cp ../installer/windows/l10ngen/helper.exe $(STAGEDIST)/uninstall
endif
# copy xpi-stage over, but not install.rdf and chrome.manifest,
# those are just for language packs
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  tar --exclude=install.rdf --exclude=chrome.manifest $(TAR_CREATE_FLAGS) - * | ( cd $(STAGEDIST) && tar -xf - )
	if test -d ../../mozilla/extensions/irc; then \
	  $(MAKE) -C ../../mozilla/extensions/irc/locales repackage-zip-$(AB_CD) STAGEDIST=$(STAGEDIST); \
	fi
	if test -d ../../mozilla/extensions/venkman; then \
	  $(MAKE) -C ../../mozilla/extensions/venkman/locales repackage-zip-$(AB_CD) STAGEDIST=$(STAGEDIST); \
	fi
ifneq (en,$(AB))
ifneq (,$(filter cocoa,$(MOZ_WIDGET_TOOLKIT)))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj
endif
endif
	$(NSINSTALL) -D $(DIST)/l10n-stage/$(PKG_PATH)
	cd $(DIST)/l10n-stage; \
	  $(MAKE_PACKAGE)
ifdef MOZ_MAKE_COMPLETE_MAR
	$(MAKE) -C $(MOZDEPTH)/tools/update-packaging full-update AB_CD=$(AB_CD) \
	  MOZ_PKG_PRETTYNAMES=$(MOZ_PKG_PRETTYNAMES) \
	  PACKAGE_BASE_DIR="$(_ABS_DIST)/l10n-stage" \
	  DIST="$(_ABS_DIST)"
endif
# packaging done, undo l10n stuff
ifneq (en,$(AB))
ifeq (cocoa,$(MOZ_WIDGET_TOOLKIT))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj
endif
endif
	$(MAKE) clobber-zip AB_CD=$(AB_CD)
	$(NSINSTALL) -D $(DIST)/$(PKG_PATH)
	mv -f "$(DIST)/l10n-stage/$(PACKAGE)" "$(DIST)/$(PACKAGE)"

repackage-zip-%: $(ZIP_IN) $(STAGEDIST) libs-%
	@$(MAKE) repackage-zip AB_CD=$* ZIP_IN=$(ZIP_IN)

langpack-%: LANGPACK_FILE=$(_ABS_DIST)/$(PKG_LANGPACK_PATH)$(PKG_LANGPACK_BASENAME).xpi
langpack-%: AB_CD=$*
langpack-%: XPI_NAME=locale-$*
langpack-%: libs-%
	@echo "Making langpack $(LANGPACK_FILE)"
	@$(NSINSTALL) -D $(DIST)/$(PKG_LANGPACK_PATH)
	$(PYTHON) $(MOZILLA_SRCDIR)/config/Preprocessor.py $(DEFINES) $(ACDEFINES) -I$(call EXPAND_MOZLOCALE_SRCDIR,toolkit/locales)/defines.inc -I$(LOCALE_SRCDIR)/defines.inc $(srcdir)/generic/install.rdf > $(FINAL_TARGET)/install.rdf
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  $(ZIP) -r9D $(LANGPACK_FILE) install.rdf chrome chrome.manifest -x chrome/$(AB_CD).manifest

langpack: langpack-$(AB_CD)

# This is a generic target that will make a langpack, repack ZIP (+tarball)
# builds, and repack an installer if applicable. It is called from the
# tinderbox scripts. Alter it with caution.

installers-%: clobber-% langpack-% repackage-win32-installer-% repackage-zip-%
	@echo "repackaging done"

ifdef MOZ_UPDATER
libs:: $(addprefix $(LOCALE_SRCDIR)/,updater/updater.ini)
ifeq ($(OS_ARCH),WINNT)
	cat $< $(srcdir)/../installer/windows/nsis/updater_append.ini | \
	  sed -e "s/^InfoText=/Info=/" -e "s/^TitleText=/Title=/" | \
	  sed -e "s/%MOZ_APP_DISPLAYNAME%/$(MOZ_APP_DISPLAYNAME)/" > \
	  $(FINAL_TARGET)/updater.ini
else
	cat $< | \
	  sed -e "s/^InfoText=/Info=/" -e "s/^TitleText=/Title=/" | \
	  sed -e "s/%MOZ_APP_DISPLAYNAME%/$(MOZ_APP_DISPLAYNAME)/" > \
	  $(FINAL_TARGET)/updater.ini
endif
endif

# This variable is to allow the wget-en-US target to know which ftp server to download from
ifndef EN_US_BINARY_URL 
EN_US_BINARY_URL = $(error You must set EN_US_BINARY_URL)
endif

# This make target allows us to wget the latest en-US binary from a specified website
# The make installers-% target needs the en-US binary in dist/
# and for the windows repackages we need the .installer.exe in dist/sea
wget-en-US:
ifndef WGET
	$(error Wget not installed)
endif
	(cd $(_ABS_DIST) && $(WGET) -nv -N  $(EN_US_BINARY_URL)/$(PACKAGE))
	@echo "Downloaded $(EN_US_BINARY_URL)/$(PACKAGE) to $(_ABS_DIST)/$(PACKAGE)"
ifeq ($(OS_ARCH), WINNT)
	$(NSINSTALL) -D $(_ABS_DIST)/$(PKG_INST_PATH)
	(cd $(_ABS_DIST)/$(PKG_INST_PATH) && $(WGET) -nv -N "$(EN_US_BINARY_URL)/$(PKG_PATH)$(PKG_INST_BASENAME).exe")
	@echo "Downloaded $(EN_US_BINARY_URL)/$(PKG_PATH)$(PKG_INST_BASENAME).exe to $(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
endif

ident:
	@printf "comm_revision "
	@$(PYTHON) $(MOZILLA_SRCDIR)/config/printconfigsetting.py \
	    $(STAGEDIST)/application.ini App SourceStamp
	@printf "moz_revision "
	@$(PYTHON) $(MOZILLA_SRCDIR)/config/printconfigsetting.py \
	    $(STAGEDIST)/platform.ini Build SourceStamp
	@printf "buildid "
	@$(PYTHON) $(MOZILLA_SRCDIR)/config/printconfigsetting.py \
	    $(STAGEDIST)/application.ini App BuildID

#These make targets call prepare-repackages by setting different UPLOAD_DIR
prepare-upload-latest-%:
	@$(MAKE) prepare-repackages-$* UPLOAD_DIR=$(DIST)/upload/latest

prepare-upload-dated-%:
	@$(MAKE) prepare-repackages-$* UPLOAD_DIR=$(DIST)/upload/`date "+%Y-%m-%d-%H"`-$(MOZ_PKG_APPNAME)$(MOZ_APP_VERSION)-l10n

# This target will generate a UPLOAD_DIR folder with
# l10n repackages in the way that we offer l10n nightlies
#  1) the package/binary
#  2) the langpack xpi
#  3) the installer (on windows)
# To set the paths those packages should end up, override the following vars:
# PKG_PATH, PKG_LANGPACK_PATH, PKG_INST_PATH
prepare-repackages-%: AB_CD=$*
prepare-repackages-%:
ifndef UPLOAD_DIR
	$(error UPLOAD_DIR not defined)
endif
	$(NSINSTALL) -D $(UPLOAD_DIR)
	$(NSINSTALL) -D $(UPLOAD_DIR)/$(PKG_LANGPACK_PATH)
# Move the langpack
	mv $(DIST)/$(PKG_LANGPACK_PATH)$(PKG_LANGPACK_BASENAME).xpi \
	   $(UPLOAD_DIR)/$(PKG_LANGPACK_PATH)$(PKG_LANGPACK_BASENAME).xpi
# Move the repackage
	mv "$(DIST)/$(PACKAGE)" \
	   "$(UPLOAD_DIR)/$(PACKAGE)"
# Move the windows installer
ifeq (WINNT, $(OS_ARCH))
	mv "$(DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe" \
	   "$(UPLOAD_DIR)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
endif
# Set the permissions that the folders will have in ftp once uploaded
	chmod -vR 775 $(UPLOAD_DIR)

generate-snippet-%:
	$(PYTHON) $(MOZILLA_SRCDIR)/tools/update-packaging/generatesnippet.py \
	    --mar-path=$(_ABS_DIST)/update \
	    --application-ini-file=$(STAGEDIST)/application.ini \
	    --locale=$* \
	    --product=$(MOZ_PKG_APPNAME) \
	    --platform=$(MOZ_PKG_PLATFORM) \
	    --download-base-URL=$(DOWNLOAD_BASE_URL) \
	    --branch=$(FILE_BRANCH) \
	    --verbose

l10n-upload-%: AB_CD=$*
l10n-upload-%:
	$(PYTHON) $(MOZILLA_SRCDIR)/build/upload.py --base-path $(DIST) "$(DIST)/$(PACKAGE)" $(DIST)/$(LANGPACK)
ifdef MOZ_MAKE_COMPLETE_MAR
	$(PYTHON) $(MOZILLA_SRCDIR)/build/upload.py --base-path $(DIST) $(DIST)/$(COMPLETE_MAR) $(call QUOTED_WILDCARD,$(wildcard $(DIST)/$(PARTIAL_MAR)))
endif
ifneq (,$(filter WINNT WINCE,$(OS_ARCH)))
	$(PYTHON) $(MOZILLA_SRCDIR)/build/upload.py --base-path $(DIST) "$(INSTALLER_PACKAGE)"
endif


merge-%:
ifdef LOCALE_MERGEDIR
	$(RM) -rf $(LOCALE_MERGEDIR)
	MACOSX_DEPLOYMENT_TARGET= compare-locales -m $(LOCALE_MERGEDIR) $(srcdir)/l10n.ini $(L10NBASEDIR) $*
endif
	@echo
