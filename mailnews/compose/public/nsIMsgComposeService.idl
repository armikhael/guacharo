/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"
#include "nsIMsgCompose.idl"
#include "nsIMsgComposeParams.idl"

interface nsIURI;
interface nsIDOMWindowInternal;
interface nsIMsgWindow;
interface nsIMsgIdentity;
interface nsIMsgIncomingServer;
interface nsIMsgDBHdr;

[scriptable, uuid(dbf4b3a7-dc38-4362-a620-ff5d22b3777c)]
interface nsIMsgComposeService : nsISupports {

  /* we need a msg window because when we forward inline we may need progress */
  void OpenComposeWindow(in string msgComposeWindowURL,
                         in nsIMsgDBHdr msgHdr,
                         in string originalMsgURI,
                         in MSG_ComposeType type, 
                         in MSG_ComposeFormat format,
                         in nsIMsgIdentity identity, 
                         in nsIMsgWindow aMsgWindow);

    /* use this method to invoke a compose window given a mailto url.
     aMsgComposeWindowURL --> can be null in most cases. If you have your own chrome
     url you want to use in brining up a compose window, pass it in here. 
     aURI --> the mailto url you want to use as the foundation for the data inside
     the compose window  */
  void OpenComposeWindowWithURI(in string msgComposeWindowURL, in nsIURI aURI);

  /* ... */
  void OpenComposeWindowWithParams(in string msgComposeWindowURL, in nsIMsgComposeParams params);

  /* ... */
  nsIMsgCompose InitCompose(in nsIDOMWindowInternal aWindow, in nsIMsgComposeParams params);

  
  /**
  * defaultIdentity
  *
  * @return the default identity, in case no identity has been setup yet, will return null
  */
  readonly attribute nsIMsgIdentity defaultIdentity;

  /* This function is use for debugging purpose only and may go away at anytime without warning */
  void TimeStamp(in string label, in boolean resetTime);  
  
  /* This attribute is use for debugging purposes for determining whether to PR_LOG or not */
  readonly attribute boolean logComposePerformance;

  [noscript] boolean determineComposeHTML(in nsIMsgIdentity aIdentity, in MSG_ComposeFormat aFormat);
  [noscript] void cacheWindow(in nsIDOMWindowInternal aWindow, in boolean aComposeHTML, in nsIMsgComposeRecyclingListener listener);
  boolean isCachedWindow(in nsIDOMWindowInternal aWindow);

  /** 
   * given a mailto url, parse the attributes and turn them into a nsIMsgComposeParams object
   * @return nsIMsgComposeParams which corresponds to the passed in mailto url
   */
  nsIMsgComposeParams getParamsForMailto(in nsIURI aURI); 

  /**
   * @{
   * These constants control how to forward messages in forwardMessage.
   * kForwardAsDefault uses value of pref "mail.forward_message_mode".
   */
  const unsigned long kForwardAsDefault = 0;
  const unsigned long kForwardAsAttachment = 1;
  const unsigned long kForwardInline = 2;
  /** @} */

  /**
   * Allow filters to automatically forward a message to the given address(es).
   * @param forwardTo the address(es) to forward to
   * @param msgHdr the header of the message being replied to
   * @param msgWindow message window to use
   * @param server server to use for determining which account to send from
   * @param aForwardType - How to forward the message one of 3 values:
   *                       kForwardAsDefault, kForwardInline, or
   *                       kForwardAsAttachment.
   */
  void forwardMessage(in AString forwardTo, in nsIMsgDBHdr msgHdr,
                      in nsIMsgWindow msgWindow, in nsIMsgIncomingServer server,
                      in unsigned long aForwardType);

  /**
   * Allow filters to automatically reply to a message. The reply message is
   * based on the given template.
   * @param msgHdr the header of the message being replied to
   * @param templateUri uri of the template to base ther reply on
   * @param msgWindow message window to use
   * @param server server to use for determining which account to send from
   */
  void replyWithTemplate(in nsIMsgDBHdr msgHdr, in string templateUri,
                         in nsIMsgWindow msgWindow, in nsIMsgIncomingServer server);

  /** 
   * Every open compose window registers itself with the compose service 
   * This allows consumers to get the msg compose object associated with a dom window
   *
   * @param aWindow The DOM Window 
   * @param aMsgCompose The compose object associated with the compose window
   *
   */
  void registerComposeWindow(in nsIDOMWindowInternal aWindow, in nsIMsgCompose aMsgCompose);

  /** 
   * When a compose window is being closed (or recyled), it unregisters itself
   * from the compose service. 
   *
   * @param aWindow The DOM Window 
   *
   */
  void unregisterComposeWindow(in nsIDOMWindowInternal aWindow);
  
  /**
   * For aWindow, returns the nsIMsgCompose object associated with the window.
   *
   * @param aWindow The DOMWindow associated with the compose window.
   *
   * @return NS_ERROR_FAILURE if we could not find a nsIMsgCompose for the passed in
   *         DOM Window.
   */
  nsIMsgCompose getMsgComposeForWindow(in nsIDOMWindowInternal aWindow);
};
